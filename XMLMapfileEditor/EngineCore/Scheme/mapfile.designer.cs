// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>XMLMapfile</NameSpace><Collection>ObservableCollection</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace XMLMapfile
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.ObjectModel;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = false)]
    public partial class LayerSet
    {

        private ObservableCollection<Layer> layerField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public LayerSet()
        {
            this.layerField = new ObservableCollection<Layer>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Layer", Order = 0)]
        public ObservableCollection<Layer> Layer
        {
            get
            {
                return this.layerField;
            }
            set
            {
                this.layerField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LayerSet));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LayerSet object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an LayerSet object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output LayerSet object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LayerSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LayerSet);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out LayerSet obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static LayerSet Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((LayerSet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current LayerSet object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an LayerSet object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output LayerSet object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LayerSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LayerSet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out LayerSet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static LayerSet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Layer
    {

        private ObservableCollection<Class> classField;

        private string classGroupField;

        private string classItemField;

        private Cluster clusterField;

        private string connectionField;

        private LayerConnectionType connectionTypeField;

        private bool connectionTypeFieldSpecified;

        private string dataField;

        private string debugField;

        private booleanEnum dumpField;

        private string extentField;

        private ObservableCollection<Feature> featureField;

        private expressionType filterField;

        private string filterItemField;

        private string footerField;

        private Grid gridField;

        private string groupField;

        private string headerField;

        private Join joinField;

        private stateEnum labelCacheField;

        private string labelItemField;

        private double labelMaxScaleDenomField;

        private bool labelMaxScaleDenomFieldSpecified;

        private double labelMinScaleDenomField;

        private bool labelMinScaleDenomFieldSpecified;

        private string labelRequiresField;

        private string maxFeaturesField;

        private double maxGeoWidthField;

        private bool maxGeoWidthFieldSpecified;

        private double maxScaleDenomField;

        private bool maxScaleDenomFieldSpecified;

        private ObservableCollection<itemTypeItem> metadataField;

        private double minGeoWidthField;

        private bool minGeoWidthFieldSpecified;

        private double minScaleDenomField;

        private bool minScaleDenomFieldSpecified;

        private rgbColorType offsiteField;

        private string opacityField;

        private string pluginField;

        private booleanEnum postLabelCacheField;

        private ObservableCollection<string> processingField;

        private string projectionField;

        private string requiresField;

        private string sizeUnitsField;

        private string styleItemField;

        private double symbolScaleDenomField;

        private bool symbolScaleDenomFieldSpecified;

        private string templateField;

        private string tileIndexField;

        private string tileItemField;

        private double toleranceField;

        private bool toleranceFieldSpecified;

        private string toleranceUnitsField;

        private string transformField;

        private string unitsField;

        private ObservableCollection<itemTypeItem> validationField;

        private string nameField;

        private LayerType typeField;

        private string statusField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Layer()
        {
            this.validationField = new ObservableCollection<itemTypeItem>();
            this.processingField = new ObservableCollection<string>();
            this.offsiteField = new rgbColorType();
            this.metadataField = new ObservableCollection<itemTypeItem>();
            this.joinField = new Join();
            this.gridField = new Grid();
            this.filterField = new expressionType();
            this.featureField = new ObservableCollection<Feature>();
            this.clusterField = new Cluster();
            this.classField = new ObservableCollection<Class>();
            this.debugField = "OFF";
            this.dumpField = booleanEnum.FALSE;
            this.labelCacheField = stateEnum.ON;
            this.postLabelCacheField = booleanEnum.FALSE;
            this.sizeUnitsField = "PIXELS";
            this.tileItemField = "LOCATION";
            this.toleranceUnitsField = "PIXELS";
            this.transformField = "TRUE";
            this.statusField = "ON";
        }

        [System.Xml.Serialization.XmlElementAttribute("Class", Order = 0)]
        public ObservableCollection<Class> Class
        {
            get
            {
                return this.classField;
            }
            set
            {
                this.classField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string classGroup
        {
            get
            {
                return this.classGroupField;
            }
            set
            {
                this.classGroupField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string classItem
        {
            get
            {
                return this.classItemField;
            }
            set
            {
                this.classItemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public Cluster Cluster
        {
            get
            {
                return this.clusterField;
            }
            set
            {
                this.clusterField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string connection
        {
            get
            {
                return this.connectionField;
            }
            set
            {
                this.connectionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public LayerConnectionType connectionType
        {
            get
            {
                return this.connectionTypeField;
            }
            set
            {
                this.connectionTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectionTypeSpecified
        {
            get
            {
                return this.connectionTypeFieldSpecified;
            }
            set
            {
                this.connectionTypeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.ComponentModel.DefaultValueAttribute("OFF")]
        public string debug
        {
            get
            {
                return this.debugField;
            }
            set
            {
                this.debugField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        [System.ComponentModel.DefaultValueAttribute(booleanEnum.FALSE)]
        public booleanEnum dump
        {
            get
            {
                return this.dumpField;
            }
            set
            {
                this.dumpField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string extent
        {
            get
            {
                return this.extentField;
            }
            set
            {
                this.extentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Feature", Order = 10)]
        public ObservableCollection<Feature> Feature
        {
            get
            {
                return this.featureField;
            }
            set
            {
                this.featureField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public expressionType filter
        {
            get
            {
                return this.filterField;
            }
            set
            {
                this.filterField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string filterItem
        {
            get
            {
                return this.filterItemField;
            }
            set
            {
                this.filterItemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public string footer
        {
            get
            {
                return this.footerField;
            }
            set
            {
                this.footerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public Grid Grid
        {
            get
            {
                return this.gridField;
            }
            set
            {
                this.gridField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public string group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public string header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        public Join Join
        {
            get
            {
                return this.joinField;
            }
            set
            {
                this.joinField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        [System.ComponentModel.DefaultValueAttribute(stateEnum.ON)]
        public stateEnum labelCache
        {
            get
            {
                return this.labelCacheField;
            }
            set
            {
                this.labelCacheField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        public string labelItem
        {
            get
            {
                return this.labelItemField;
            }
            set
            {
                this.labelItemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        public double labelMaxScaleDenom
        {
            get
            {
                return this.labelMaxScaleDenomField;
            }
            set
            {
                this.labelMaxScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool labelMaxScaleDenomSpecified
        {
            get
            {
                return this.labelMaxScaleDenomFieldSpecified;
            }
            set
            {
                this.labelMaxScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        public double labelMinScaleDenom
        {
            get
            {
                return this.labelMinScaleDenomField;
            }
            set
            {
                this.labelMinScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool labelMinScaleDenomSpecified
        {
            get
            {
                return this.labelMinScaleDenomFieldSpecified;
            }
            set
            {
                this.labelMinScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 22)]
        public string labelRequires
        {
            get
            {
                return this.labelRequiresField;
            }
            set
            {
                this.labelRequiresField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 23)]
        public string maxFeatures
        {
            get
            {
                return this.maxFeaturesField;
            }
            set
            {
                this.maxFeaturesField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 24)]
        public double maxGeoWidth
        {
            get
            {
                return this.maxGeoWidthField;
            }
            set
            {
                this.maxGeoWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxGeoWidthSpecified
        {
            get
            {
                return this.maxGeoWidthFieldSpecified;
            }
            set
            {
                this.maxGeoWidthFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 25)]
        public double maxScaleDenom
        {
            get
            {
                return this.maxScaleDenomField;
            }
            set
            {
                this.maxScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxScaleDenomSpecified
        {
            get
            {
                return this.maxScaleDenomFieldSpecified;
            }
            set
            {
                this.maxScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 26)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable = false)]
        public ObservableCollection<itemTypeItem> Metadata
        {
            get
            {
                return this.metadataField;
            }
            set
            {
                this.metadataField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 27)]
        public double minGeoWidth
        {
            get
            {
                return this.minGeoWidthField;
            }
            set
            {
                this.minGeoWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minGeoWidthSpecified
        {
            get
            {
                return this.minGeoWidthFieldSpecified;
            }
            set
            {
                this.minGeoWidthFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 28)]
        public double minScaleDenom
        {
            get
            {
                return this.minScaleDenomField;
            }
            set
            {
                this.minScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minScaleDenomSpecified
        {
            get
            {
                return this.minScaleDenomFieldSpecified;
            }
            set
            {
                this.minScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 29)]
        public rgbColorType offsite
        {
            get
            {
                return this.offsiteField;
            }
            set
            {
                this.offsiteField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 30)]
        public string opacity
        {
            get
            {
                return this.opacityField;
            }
            set
            {
                this.opacityField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 31)]
        public string plugin
        {
            get
            {
                return this.pluginField;
            }
            set
            {
                this.pluginField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 32)]
        [System.ComponentModel.DefaultValueAttribute(booleanEnum.FALSE)]
        public booleanEnum postLabelCache
        {
            get
            {
                return this.postLabelCacheField;
            }
            set
            {
                this.postLabelCacheField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("processing", Order = 33)]
        public ObservableCollection<string> processing
        {
            get
            {
                return this.processingField;
            }
            set
            {
                this.processingField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 34)]
        public string projection
        {
            get
            {
                return this.projectionField;
            }
            set
            {
                this.projectionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 35)]
        public string requires
        {
            get
            {
                return this.requiresField;
            }
            set
            {
                this.requiresField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 36)]
        [System.ComponentModel.DefaultValueAttribute("PIXELS")]
        public string sizeUnits
        {
            get
            {
                return this.sizeUnitsField;
            }
            set
            {
                this.sizeUnitsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 37)]
        public string styleItem
        {
            get
            {
                return this.styleItemField;
            }
            set
            {
                this.styleItemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 38)]
        public double symbolScaleDenom
        {
            get
            {
                return this.symbolScaleDenomField;
            }
            set
            {
                this.symbolScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool symbolScaleDenomSpecified
        {
            get
            {
                return this.symbolScaleDenomFieldSpecified;
            }
            set
            {
                this.symbolScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 39)]
        public string template
        {
            get
            {
                return this.templateField;
            }
            set
            {
                this.templateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 40)]
        public string tileIndex
        {
            get
            {
                return this.tileIndexField;
            }
            set
            {
                this.tileIndexField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 41)]
        [System.ComponentModel.DefaultValueAttribute("LOCATION")]
        public string tileItem
        {
            get
            {
                return this.tileItemField;
            }
            set
            {
                this.tileItemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 42)]
        public double tolerance
        {
            get
            {
                return this.toleranceField;
            }
            set
            {
                this.toleranceField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool toleranceSpecified
        {
            get
            {
                return this.toleranceFieldSpecified;
            }
            set
            {
                this.toleranceFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 43)]
        [System.ComponentModel.DefaultValueAttribute("PIXELS")]
        public string toleranceUnits
        {
            get
            {
                return this.toleranceUnitsField;
            }
            set
            {
                this.toleranceUnitsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 44)]
        [System.ComponentModel.DefaultValueAttribute("TRUE")]
        public string transform
        {
            get
            {
                return this.transformField;
            }
            set
            {
                this.transformField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 45)]
        public string units
        {
            get
            {
                return this.unitsField;
            }
            set
            {
                this.unitsField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 46)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable = false)]
        public ObservableCollection<itemTypeItem> Validation
        {
            get
            {
                return this.validationField;
            }
            set
            {
                this.validationField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public LayerType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("ON")]
        public string status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Layer));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Layer object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Layer object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Layer object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Layer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Layer);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Layer obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Layer Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Layer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Layer object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Layer object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Layer object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Layer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Layer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Layer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Layer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Class
    {

        private rgbColorType backgroundColorField;

        private rgbColorType colorField;

        private stateEnum debugField;

        private bool debugFieldSpecified;

        private expressionType expressionField;

        private string groupField;

        private string keyImageField;

        private Label labelField;

        private double maxScaleDenomField;

        private bool maxScaleDenomFieldSpecified;

        private string maxSizeField;

        private double minScaleDenomField;

        private bool minScaleDenomFieldSpecified;

        private string minSizeField;

        private object itemField;

        private string sizeField;

        private ObservableCollection<Style> styleField;

        private symbolType symbolField;

        private string templateField;

        private string textField;

        private string nameField;

        private stateEnum statusField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Class()
        {
            this.symbolField = new symbolType();
            this.styleField = new ObservableCollection<Style>();
            this.labelField = new Label();
            this.expressionField = new expressionType();
            this.colorField = new rgbColorType();
            this.backgroundColorField = new rgbColorType();
            this.maxSizeField = "50";
            this.minSizeField = "0";
            this.sizeField = "1";
            this.statusField = stateEnum.ON;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public rgbColorType backgroundColor
        {
            get
            {
                return this.backgroundColorField;
            }
            set
            {
                this.backgroundColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public rgbColorType color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                this.colorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public stateEnum debug
        {
            get
            {
                return this.debugField;
            }
            set
            {
                this.debugField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool debugSpecified
        {
            get
            {
                return this.debugFieldSpecified;
            }
            set
            {
                this.debugFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public expressionType expression
        {
            get
            {
                return this.expressionField;
            }
            set
            {
                this.expressionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string keyImage
        {
            get
            {
                return this.keyImageField;
            }
            set
            {
                this.keyImageField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public Label Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public double maxScaleDenom
        {
            get
            {
                return this.maxScaleDenomField;
            }
            set
            {
                this.maxScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxScaleDenomSpecified
        {
            get
            {
                return this.maxScaleDenomFieldSpecified;
            }
            set
            {
                this.maxScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 8)]
        [System.ComponentModel.DefaultValueAttribute("50")]
        public string maxSize
        {
            get
            {
                return this.maxSizeField;
            }
            set
            {
                this.maxSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public double minScaleDenom
        {
            get
            {
                return this.minScaleDenomField;
            }
            set
            {
                this.minScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minScaleDenomSpecified
        {
            get
            {
                return this.minScaleDenomFieldSpecified;
            }
            set
            {
                this.minScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 10)]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string minSize
        {
            get
            {
                return this.minSizeField;
            }
            set
            {
                this.minSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("outlineColor", typeof(rgbColorType), Order = 11)]
        [System.Xml.Serialization.XmlElementAttribute("outlineColorAttribute", typeof(string), Order = 11)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 12)]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Style", Order = 13)]
        public ObservableCollection<Style> Style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                this.styleField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public symbolType symbol
        {
            get
            {
                return this.symbolField;
            }
            set
            {
                this.symbolField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public string template
        {
            get
            {
                return this.templateField;
            }
            set
            {
                this.templateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public string text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(stateEnum.ON)]
        public stateEnum status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Class));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Class object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Class object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Class object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Class obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Class);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Class obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Class Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Class)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Class object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Class object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Class object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Class obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Class);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Class obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Class LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class rgbColorType
    {

        private string redField;

        private string greenField;

        private string blueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string red
        {
            get
            {
                return this.redField;
            }
            set
            {
                this.redField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string green
        {
            get
            {
                return this.greenField;
            }
            set
            {
                this.greenField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string blue
        {
            get
            {
                return this.blueField;
            }
            set
            {
                this.blueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(rgbColorType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current rgbColorType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an rgbColorType object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output rgbColorType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out rgbColorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(rgbColorType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out rgbColorType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static rgbColorType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((rgbColorType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current rgbColorType object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an rgbColorType object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output rgbColorType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out rgbColorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(rgbColorType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out rgbColorType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static rgbColorType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Cluster
    {

        private float bufferField;

        private bool bufferFieldSpecified;

        private expressionType filterField;

        private expressionType groupField;

        private string maxdistanceField;

        private string regionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Cluster()
        {
            this.groupField = new expressionType();
            this.filterField = new expressionType();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public float buffer
        {
            get
            {
                return this.bufferField;
            }
            set
            {
                this.bufferField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bufferSpecified
        {
            get
            {
                return this.bufferFieldSpecified;
            }
            set
            {
                this.bufferFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public expressionType filter
        {
            get
            {
                return this.filterField;
            }
            set
            {
                this.filterField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public expressionType group
        {
            get
            {
                return this.groupField;
            }
            set
            {
                this.groupField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 3)]
        public string maxdistance
        {
            get
            {
                return this.maxdistanceField;
            }
            set
            {
                this.maxdistanceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string region
        {
            get
            {
                return this.regionField;
            }
            set
            {
                this.regionField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Cluster));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Cluster object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Cluster object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Cluster object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Cluster obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Cluster);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Cluster obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Cluster Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Cluster)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Cluster object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Cluster object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Cluster object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Cluster obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Cluster);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Cluster obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Cluster LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class expressionType
    {

        private expressionTypeType typeField;

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public expressionType()
        {
            this.typeField = expressionTypeType.CONSTANT;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(expressionTypeType.CONSTANT)]
        public expressionTypeType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(expressionType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current expressionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an expressionType object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output expressionType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out expressionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(expressionType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out expressionType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static expressionType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((expressionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current expressionType object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an expressionType object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output expressionType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out expressionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(expressionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out expressionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static expressionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum expressionTypeType
    {

        /// <remarks/>
        CONSTANT,

        /// <remarks/>
        REGEX,

        /// <remarks/>
        MSEXPR,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Reference
    {

        private rgbColorType colorField;

        private string extentField;

        private string imageField;

        private string markerField;

        private string markerSizeField;

        private string maxBoxSizeField;

        private string minBoxSizeField;

        private rgbExtendedColorType outlineColorField;

        private sizeType sizeField;

        private stateEnum statusField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Reference()
        {
            this.sizeField = new sizeType();
            this.outlineColorField = new rgbExtendedColorType();
            this.colorField = new rgbColorType();
            this.statusField = stateEnum.OFF;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public rgbColorType color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                this.colorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string extent
        {
            get
            {
                return this.extentField;
            }
            set
            {
                this.extentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string image
        {
            get
            {
                return this.imageField;
            }
            set
            {
                this.imageField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string marker
        {
            get
            {
                return this.markerField;
            }
            set
            {
                this.markerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 4)]
        public string markerSize
        {
            get
            {
                return this.markerSizeField;
            }
            set
            {
                this.markerSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 5)]
        public string maxBoxSize
        {
            get
            {
                return this.maxBoxSizeField;
            }
            set
            {
                this.maxBoxSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 6)]
        public string minBoxSize
        {
            get
            {
                return this.minBoxSizeField;
            }
            set
            {
                this.minBoxSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public rgbExtendedColorType outlineColor
        {
            get
            {
                return this.outlineColorField;
            }
            set
            {
                this.outlineColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public sizeType size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(stateEnum.OFF)]
        public stateEnum status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Reference));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Reference object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Reference object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Reference object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Reference obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Reference);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Reference obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Reference Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Reference)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Reference object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Reference object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Reference object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Reference obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Reference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Reference obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Reference LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class rgbExtendedColorType
    {

        private string redField;

        private string greenField;

        private string blueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string red
        {
            get
            {
                return this.redField;
            }
            set
            {
                this.redField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string green
        {
            get
            {
                return this.greenField;
            }
            set
            {
                this.greenField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string blue
        {
            get
            {
                return this.blueField;
            }
            set
            {
                this.blueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(rgbExtendedColorType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current rgbExtendedColorType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an rgbExtendedColorType object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output rgbExtendedColorType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out rgbExtendedColorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(rgbExtendedColorType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out rgbExtendedColorType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static rgbExtendedColorType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((rgbExtendedColorType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current rgbExtendedColorType object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an rgbExtendedColorType object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output rgbExtendedColorType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out rgbExtendedColorType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(rgbExtendedColorType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out rgbExtendedColorType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static rgbExtendedColorType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class sizeType
    {

        private string xField;

        private string yField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(sizeType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current sizeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an sizeType object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output sizeType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out sizeType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(sizeType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out sizeType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static sizeType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((sizeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current sizeType object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an sizeType object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output sizeType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out sizeType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(sizeType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out sizeType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static sizeType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    public enum stateEnum
    {

        /// <remarks/>
        ON,

        /// <remarks/>
        OFF,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Join
    {

        private string connectionField;

        private JoinConnectionType connectionTypeField;

        private bool connectionTypeFieldSpecified;

        private string footerField;

        private string fromField;

        private string headerField;

        private string tableField;

        private string templateField;

        private string toField;

        private string nameField;

        private JoinType typeField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Join()
        {
            this.typeField = JoinType.ONETOONE;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string connection
        {
            get
            {
                return this.connectionField;
            }
            set
            {
                this.connectionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public JoinConnectionType connectionType
        {
            get
            {
                return this.connectionTypeField;
            }
            set
            {
                this.connectionTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool connectionTypeSpecified
        {
            get
            {
                return this.connectionTypeFieldSpecified;
            }
            set
            {
                this.connectionTypeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string footer
        {
            get
            {
                return this.footerField;
            }
            set
            {
                this.footerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string from
        {
            get
            {
                return this.fromField;
            }
            set
            {
                this.fromField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string table
        {
            get
            {
                return this.tableField;
            }
            set
            {
                this.tableField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string template
        {
            get
            {
                return this.templateField;
            }
            set
            {
                this.templateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string to
        {
            get
            {
                return this.toField;
            }
            set
            {
                this.toField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(JoinType.ONETOONE)]
        public JoinType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Join));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Join object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Join object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Join object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Join obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Join);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Join obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Join Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Join)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Join object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Join object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Join object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Join obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Join);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Join obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Join LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum JoinConnectionType
    {

        /// <remarks/>
        MYSQL,

        /// <remarks/>
        POSTGRESQL,

        /// <remarks/>
        CSV,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum JoinType
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ONE-TO-ONE")]
        ONETOONE,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ONE-TO-MANY")]
        ONETOMANY,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Grid
    {

        private string labelFormatField;

        private double maxArcsField;

        private bool maxArcsFieldSpecified;

        private double maxIntervalField;

        private bool maxIntervalFieldSpecified;

        private double maxSubdivideField;

        private double minArcsField;

        private bool minArcsFieldSpecified;

        private double minIntervalField;

        private bool minIntervalFieldSpecified;

        private double minSubdivideField;

        private bool minSubdivideFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Grid()
        {
            this.maxSubdivideField = 256D;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string labelFormat
        {
            get
            {
                return this.labelFormatField;
            }
            set
            {
                this.labelFormatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public double maxArcs
        {
            get
            {
                return this.maxArcsField;
            }
            set
            {
                this.maxArcsField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxArcsSpecified
        {
            get
            {
                return this.maxArcsFieldSpecified;
            }
            set
            {
                this.maxArcsFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public double maxInterval
        {
            get
            {
                return this.maxIntervalField;
            }
            set
            {
                this.maxIntervalField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxIntervalSpecified
        {
            get
            {
                return this.maxIntervalFieldSpecified;
            }
            set
            {
                this.maxIntervalFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [System.ComponentModel.DefaultValueAttribute(256D)]
        public double maxSubdivide
        {
            get
            {
                return this.maxSubdivideField;
            }
            set
            {
                this.maxSubdivideField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public double minArcs
        {
            get
            {
                return this.minArcsField;
            }
            set
            {
                this.minArcsField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minArcsSpecified
        {
            get
            {
                return this.minArcsFieldSpecified;
            }
            set
            {
                this.minArcsFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public double minInterval
        {
            get
            {
                return this.minIntervalField;
            }
            set
            {
                this.minIntervalField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minIntervalSpecified
        {
            get
            {
                return this.minIntervalFieldSpecified;
            }
            set
            {
                this.minIntervalFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public double minSubdivide
        {
            get
            {
                return this.minSubdivideField;
            }
            set
            {
                this.minSubdivideField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minSubdivideSpecified
        {
            get
            {
                return this.minSubdivideFieldSpecified;
            }
            set
            {
                this.minSubdivideFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Grid));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Grid object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Grid object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Grid object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Grid obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grid);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Grid obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Grid Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Grid)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Grid object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Grid object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Grid object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Grid obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grid);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Grid obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Grid LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Feature
    {

        private ObservableCollection<pointType> pointsField;

        private string itemsField;

        private string textField;

        private string wktField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Feature()
        {
            this.pointsField = new ObservableCollection<pointType>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("point", IsNullable = false)]
        public ObservableCollection<pointType> Points
        {
            get
            {
                return this.pointsField;
            }
            set
            {
                this.pointsField = value;
            }
        }

        public string items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        public string text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }

        public string wkt
        {
            get
            {
                return this.wktField;
            }
            set
            {
                this.wktField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Feature));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Feature object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Feature object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Feature object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Feature obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Feature);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Feature obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Feature Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Feature)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Feature object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Feature object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Feature object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Feature obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Feature);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Feature obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Feature LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class pointType
    {

        private float xField;

        private bool xFieldSpecified;

        private float yField;

        private bool yFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float x
        {
            get
            {
                return this.xField;
            }
            set
            {
                this.xField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool xSpecified
        {
            get
            {
                return this.xFieldSpecified;
            }
            set
            {
                this.xFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float y
        {
            get
            {
                return this.yField;
            }
            set
            {
                this.yField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ySpecified
        {
            get
            {
                return this.yFieldSpecified;
            }
            set
            {
                this.yFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(pointType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current pointType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an pointType object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output pointType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out pointType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pointType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out pointType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static pointType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((pointType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current pointType object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an pointType object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output pointType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out pointType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(pointType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out pointType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static pointType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Symbol
    {

        private booleanEnum antialiasField;

        private bool antialiasFieldSpecified;

        private string characterField;

        private booleanEnum filledField;

        private bool filledFieldSpecified;

        private string fontField;

        private string imageField;

        private ObservableCollection<pointType> pointsField;

        private string transparentField;

        private string nameField;

        private SymbolType typeField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Symbol()
        {
            this.pointsField = new ObservableCollection<pointType>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public booleanEnum antialias
        {
            get
            {
                return this.antialiasField;
            }
            set
            {
                this.antialiasField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool antialiasSpecified
        {
            get
            {
                return this.antialiasFieldSpecified;
            }
            set
            {
                this.antialiasFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string character
        {
            get
            {
                return this.characterField;
            }
            set
            {
                this.characterField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public booleanEnum filled
        {
            get
            {
                return this.filledField;
            }
            set
            {
                this.filledField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool filledSpecified
        {
            get
            {
                return this.filledFieldSpecified;
            }
            set
            {
                this.filledFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string font
        {
            get
            {
                return this.fontField;
            }
            set
            {
                this.fontField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string image
        {
            get
            {
                return this.imageField;
            }
            set
            {
                this.imageField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("point", IsNullable = false)]
        public ObservableCollection<pointType> Points
        {
            get
            {
                return this.pointsField;
            }
            set
            {
                this.pointsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 6)]
        public string transparent
        {
            get
            {
                return this.transparentField;
            }
            set
            {
                this.transparentField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public SymbolType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Symbol));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Symbol object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Symbol object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Symbol object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Symbol obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Symbol);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Symbol obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Symbol Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Symbol)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Symbol object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Symbol object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Symbol object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Symbol obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Symbol);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Symbol obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Symbol LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    public enum booleanEnum
    {

        /// <remarks/>
        TRUE,

        /// <remarks/>
        FALSE,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum SymbolType
    {

        /// <remarks/>
        VECTOR,

        /// <remarks/>
        ELLIPSE,

        /// <remarks/>
        PIXMAP,

        /// <remarks/>
        TRUETYPE,

        /// <remarks/>
        HATCH,

        /// <remarks/>
        SIMPLE,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class symbolType
    {

        private symbolTypeType typeField;

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public symbolType()
        {
            this.typeField = symbolTypeType.ID;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(symbolTypeType.ID)]
        public symbolTypeType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(symbolType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current symbolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an symbolType object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output symbolType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out symbolType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(symbolType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out symbolType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static symbolType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((symbolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current symbolType object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an symbolType object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output symbolType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out symbolType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(symbolType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out symbolType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static symbolType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum symbolTypeType
    {

        /// <remarks/>
        ID,

        /// <remarks/>
        NAME,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Style
    {

        private string angleField;

        private booleanEnum antialiasField;

        private bool antialiasFieldSpecified;

        private rgbColorType backgroundColorField;

        private object itemField;

        private string gapField;

        private StyleGeomTransform geomTransformField;

        private bool geomTransformFieldSpecified;

        private StyleLineCap lineCapField;

        private StyleLineJoin lineJoinField;

        private bool lineJoinFieldSpecified;

        private string lineJoinMaxSizeField;

        private float maxSizeField;

        private float maxWidthField;

        private float minSizeField;

        private float minWidthField;

        private sizeType offsetField;

        private string opacityField;

        private object item1Field;

        private string patternField;

        private string sizeField;

        private symbolType symbolField;

        private string widthField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Style()
        {
            this.symbolField = new symbolType();
            this.offsetField = new sizeType();
            this.backgroundColorField = new rgbColorType();
            this.angleField = "0";
            this.gapField = "0";
            this.lineCapField = StyleLineCap.BUTT;
            this.lineJoinMaxSizeField = "3";
            this.maxSizeField = ((float)(500F));
            this.maxWidthField = ((float)(32F));
            this.minSizeField = ((float)(0F));
            this.minWidthField = ((float)(0F));
            this.opacityField = "0";
            this.sizeField = "1";
            this.widthField = "1";
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string angle
        {
            get
            {
                return this.angleField;
            }
            set
            {
                this.angleField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public booleanEnum antialias
        {
            get
            {
                return this.antialiasField;
            }
            set
            {
                this.antialiasField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool antialiasSpecified
        {
            get
            {
                return this.antialiasFieldSpecified;
            }
            set
            {
                this.antialiasFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public rgbColorType backgroundColor
        {
            get
            {
                return this.backgroundColorField;
            }
            set
            {
                this.backgroundColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("color", typeof(rgbColorType), Order = 3)]
        [System.Xml.Serialization.XmlElementAttribute("colorAttribute", typeof(string), Order = 3)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 4)]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string gap
        {
            get
            {
                return this.gapField;
            }
            set
            {
                this.gapField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public StyleGeomTransform geomTransform
        {
            get
            {
                return this.geomTransformField;
            }
            set
            {
                this.geomTransformField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool geomTransformSpecified
        {
            get
            {
                return this.geomTransformFieldSpecified;
            }
            set
            {
                this.geomTransformFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        [System.ComponentModel.DefaultValueAttribute(StyleLineCap.BUTT)]
        public StyleLineCap lineCap
        {
            get
            {
                return this.lineCapField;
            }
            set
            {
                this.lineCapField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public StyleLineJoin lineJoin
        {
            get
            {
                return this.lineJoinField;
            }
            set
            {
                this.lineJoinField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lineJoinSpecified
        {
            get
            {
                return this.lineJoinFieldSpecified;
            }
            set
            {
                this.lineJoinFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 8)]
        [System.ComponentModel.DefaultValueAttribute("3")]
        public string lineJoinMaxSize
        {
            get
            {
                return this.lineJoinMaxSizeField;
            }
            set
            {
                this.lineJoinMaxSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        [System.ComponentModel.DefaultValueAttribute(typeof(float), "500")]
        public float maxSize
        {
            get
            {
                return this.maxSizeField;
            }
            set
            {
                this.maxSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        [System.ComponentModel.DefaultValueAttribute(typeof(float), "32")]
        public float maxWidth
        {
            get
            {
                return this.maxWidthField;
            }
            set
            {
                this.maxWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        [System.ComponentModel.DefaultValueAttribute(typeof(float), "0")]
        public float minSize
        {
            get
            {
                return this.minSizeField;
            }
            set
            {
                this.minSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        [System.ComponentModel.DefaultValueAttribute(typeof(float), "0")]
        public float minWidth
        {
            get
            {
                return this.minWidthField;
            }
            set
            {
                this.minWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public sizeType offset
        {
            get
            {
                return this.offsetField;
            }
            set
            {
                this.offsetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 14)]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string opacity
        {
            get
            {
                return this.opacityField;
            }
            set
            {
                this.opacityField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("outlineColor", typeof(rgbColorType), Order = 15)]
        [System.Xml.Serialization.XmlElementAttribute("outlineColorAttribute", typeof(string), Order = 15)]
        public object Item1
        {
            get
            {
                return this.item1Field;
            }
            set
            {
                this.item1Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public string pattern
        {
            get
            {
                return this.patternField;
            }
            set
            {
                this.patternField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public symbolType symbol
        {
            get
            {
                return this.symbolField;
            }
            set
            {
                this.symbolField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Style));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Style object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Style object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Style object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Style obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Style);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Style obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Style Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Style)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Style object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Style object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Style object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Style obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Style);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Style obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Style LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum StyleGeomTransform
    {

        /// <remarks/>
        BBOX,

        /// <remarks/>
        END,

        /// <remarks/>
        LABELPNT,

        /// <remarks/>
        LABELPOLY,

        /// <remarks/>
        START,

        /// <remarks/>
        VERTICES,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum StyleLineCap
    {

        /// <remarks/>
        BUTT,

        /// <remarks/>
        ROUND,

        /// <remarks/>
        SQUARE,

        /// <remarks/>
        TRIANGLE,

        /// <remarks/>
        SVG,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum StyleLineJoin
    {

        /// <remarks/>
        ROUND,

        /// <remarks/>
        MITER,

        /// <remarks/>
        BEVEL,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class ScaleBar
    {

        private alignEnum alignField;

        private rgbColorType backgroundColorField;

        private rgbColorType colorField;

        private rgbColorType imageColorField;

        private string intervalsField;

        private Label labelField;

        private rgbColorType outlineColorField;

        private positionEnum positionField;

        private booleanEnum postLabelCacheField;

        private sizeType sizeField;

        private string styleField;

        private stateEnum transparentField;

        private bool transparentFieldSpecified;

        private unitType unitsField;

        private string statusField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public ScaleBar()
        {
            this.sizeField = new sizeType();
            this.outlineColorField = new rgbColorType();
            this.labelField = new Label();
            this.imageColorField = new rgbColorType();
            this.colorField = new rgbColorType();
            this.backgroundColorField = new rgbColorType();
            this.intervalsField = "4";
            this.positionField = positionEnum.LR;
            this.postLabelCacheField = booleanEnum.FALSE;
            this.unitsField = unitType.MILES;
            this.statusField = "OFF";
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public alignEnum align
        {
            get
            {
                return this.alignField;
            }
            set
            {
                this.alignField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public rgbColorType backgroundColor
        {
            get
            {
                return this.backgroundColorField;
            }
            set
            {
                this.backgroundColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public rgbColorType color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                this.colorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public rgbColorType imageColor
        {
            get
            {
                return this.imageColorField;
            }
            set
            {
                this.imageColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 4)]
        [System.ComponentModel.DefaultValueAttribute("4")]
        public string intervals
        {
            get
            {
                return this.intervalsField;
            }
            set
            {
                this.intervalsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public Label Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public rgbColorType outlineColor
        {
            get
            {
                return this.outlineColorField;
            }
            set
            {
                this.outlineColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.ComponentModel.DefaultValueAttribute(positionEnum.LR)]
        public positionEnum position
        {
            get
            {
                return this.positionField;
            }
            set
            {
                this.positionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        [System.ComponentModel.DefaultValueAttribute(booleanEnum.FALSE)]
        public booleanEnum postLabelCache
        {
            get
            {
                return this.postLabelCacheField;
            }
            set
            {
                this.postLabelCacheField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public sizeType size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 10)]
        public string style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                this.styleField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public stateEnum transparent
        {
            get
            {
                return this.transparentField;
            }
            set
            {
                this.transparentField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transparentSpecified
        {
            get
            {
                return this.transparentFieldSpecified;
            }
            set
            {
                this.transparentFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        [System.ComponentModel.DefaultValueAttribute(unitType.MILES)]
        public unitType units
        {
            get
            {
                return this.unitsField;
            }
            set
            {
                this.unitsField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("OFF")]
        public string status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ScaleBar));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ScaleBar object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ScaleBar object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output ScaleBar object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ScaleBar obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ScaleBar);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ScaleBar obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ScaleBar Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ScaleBar)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ScaleBar object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ScaleBar object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output ScaleBar object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ScaleBar obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ScaleBar);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ScaleBar obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ScaleBar LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    public enum alignEnum
    {

        /// <remarks/>
        LEFT,

        /// <remarks/>
        CENTER,

        /// <remarks/>
        RIGHT,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Label
    {

        private alignEnum alignField;

        private string angleField;

        private booleanEnum antialiasField;

        private bool antialiasFieldSpecified;

        private string bufferField;

        private object itemField;

        private object encodingField;

        private string fontField;

        private booleanEnum forceField;

        private string maxLengthField;

        private float maxOverlapAngleField;

        private bool maxOverlapAngleFieldSpecified;

        private string maxSizeField;

        private string minDistanceField;

        private string minFeatureSizeField;

        private string minSizeField;

        private sizeType offsetField;

        private object item1Field;

        private string outlineWidthField;

        private booleanEnum partialsField;

        private bool partialsFieldSpecified;

        private string positionField;

        private string priorityField;

        private string repeatDistanceField;

        private rgbColorType shadowColorField;

        private sizeType shadowSizeField;

        private string sizeField;

        private Style styleField;

        private string wrapField;

        private LabelType typeField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Label()
        {
            this.styleField = new Style();
            this.shadowSizeField = new sizeType();
            this.shadowColorField = new rgbColorType();
            this.offsetField = new sizeType();
            this.forceField = booleanEnum.FALSE;
            this.maxLengthField = "0";
            this.maxSizeField = "256";
            this.minSizeField = "4";
            this.outlineWidthField = "1";
            this.priorityField = "1";
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public alignEnum align
        {
            get
            {
                return this.alignField;
            }
            set
            {
                this.alignField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string angle
        {
            get
            {
                return this.angleField;
            }
            set
            {
                this.angleField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public booleanEnum antialias
        {
            get
            {
                return this.antialiasField;
            }
            set
            {
                this.antialiasField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool antialiasSpecified
        {
            get
            {
                return this.antialiasFieldSpecified;
            }
            set
            {
                this.antialiasFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 3)]
        public string buffer
        {
            get
            {
                return this.bufferField;
            }
            set
            {
                this.bufferField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("color", typeof(rgbColorType), Order = 4)]
        [System.Xml.Serialization.XmlElementAttribute("colorAttribute", typeof(string), Order = 4)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public object encoding
        {
            get
            {
                return this.encodingField;
            }
            set
            {
                this.encodingField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string font
        {
            get
            {
                return this.fontField;
            }
            set
            {
                this.fontField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        [System.ComponentModel.DefaultValueAttribute(booleanEnum.FALSE)]
        public booleanEnum force
        {
            get
            {
                return this.forceField;
            }
            set
            {
                this.forceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 8)]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string maxLength
        {
            get
            {
                return this.maxLengthField;
            }
            set
            {
                this.maxLengthField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public float maxOverlapAngle
        {
            get
            {
                return this.maxOverlapAngleField;
            }
            set
            {
                this.maxOverlapAngleField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxOverlapAngleSpecified
        {
            get
            {
                return this.maxOverlapAngleFieldSpecified;
            }
            set
            {
                this.maxOverlapAngleFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 10)]
        [System.ComponentModel.DefaultValueAttribute("256")]
        public string maxSize
        {
            get
            {
                return this.maxSizeField;
            }
            set
            {
                this.maxSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 11)]
        public string minDistance
        {
            get
            {
                return this.minDistanceField;
            }
            set
            {
                this.minDistanceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 12)]
        public string minFeatureSize
        {
            get
            {
                return this.minFeatureSizeField;
            }
            set
            {
                this.minFeatureSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 13)]
        [System.ComponentModel.DefaultValueAttribute("4")]
        public string minSize
        {
            get
            {
                return this.minSizeField;
            }
            set
            {
                this.minSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public sizeType offset
        {
            get
            {
                return this.offsetField;
            }
            set
            {
                this.offsetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("outlineColor", typeof(rgbColorType), Order = 15)]
        [System.Xml.Serialization.XmlElementAttribute("outlineColorAttribute", typeof(string), Order = 15)]
        public object Item1
        {
            get
            {
                return this.item1Field;
            }
            set
            {
                this.item1Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 16)]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string outlineWidth
        {
            get
            {
                return this.outlineWidthField;
            }
            set
            {
                this.outlineWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 17)]
        public booleanEnum partials
        {
            get
            {
                return this.partialsField;
            }
            set
            {
                this.partialsField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool partialsSpecified
        {
            get
            {
                return this.partialsFieldSpecified;
            }
            set
            {
                this.partialsFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public string position
        {
            get
            {
                return this.positionField;
            }
            set
            {
                this.positionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string priority
        {
            get
            {
                return this.priorityField;
            }
            set
            {
                this.priorityField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer", Order = 20)]
        public string repeatDistance
        {
            get
            {
                return this.repeatDistanceField;
            }
            set
            {
                this.repeatDistanceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        public rgbColorType shadowColor
        {
            get
            {
                return this.shadowColorField;
            }
            set
            {
                this.shadowColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 22)]
        public sizeType shadowSize
        {
            get
            {
                return this.shadowSizeField;
            }
            set
            {
                this.shadowSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 23)]
        public string size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 24)]
        public Style Style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                this.styleField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 25)]
        public string wrap
        {
            get
            {
                return this.wrapField;
            }
            set
            {
                this.wrapField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public LabelType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Label));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Label object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Label object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Label object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Label obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Label);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Label obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Label Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Label)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Label object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Label object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Label object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Label obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Label);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Label obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Label LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum LabelType
    {

        /// <remarks/>
        BITMAP,

        /// <remarks/>
        TRUETYPE,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    public enum positionEnum
    {

        /// <remarks/>
        UL,

        /// <remarks/>
        UC,

        /// <remarks/>
        UR,

        /// <remarks/>
        LL,

        /// <remarks/>
        LC,

        /// <remarks/>
        LR,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    public enum unitType
    {

        /// <remarks/>
        FEET,

        /// <remarks/>
        INCHES,

        /// <remarks/>
        KILOMETERS,

        /// <remarks/>
        METERS,

        /// <remarks/>
        MILES,

        /// <remarks/>
        NAUTICALMILES,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Legend
    {

        private rgbColorType imageColorField;

        private sizeType keySizeField;

        private sizeType keySpacingField;

        private Label labelField;

        private rgbColorType outlineColorField;

        private positionEnum positionField;

        private bool positionFieldSpecified;

        private booleanEnum postLabelCacheField;

        private bool postLabelCacheFieldSpecified;

        private string templateField;

        private string statusField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Legend()
        {
            this.outlineColorField = new rgbColorType();
            this.labelField = new Label();
            this.keySpacingField = new sizeType();
            this.keySizeField = new sizeType();
            this.imageColorField = new rgbColorType();
        }

        public rgbColorType imageColor
        {
            get
            {
                return this.imageColorField;
            }
            set
            {
                this.imageColorField = value;
            }
        }

        public sizeType keySize
        {
            get
            {
                return this.keySizeField;
            }
            set
            {
                this.keySizeField = value;
            }
        }

        public sizeType keySpacing
        {
            get
            {
                return this.keySpacingField;
            }
            set
            {
                this.keySpacingField = value;
            }
        }

        public Label Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        public rgbColorType outlineColor
        {
            get
            {
                return this.outlineColorField;
            }
            set
            {
                this.outlineColorField = value;
            }
        }

        public positionEnum position
        {
            get
            {
                return this.positionField;
            }
            set
            {
                this.positionField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool positionSpecified
        {
            get
            {
                return this.positionFieldSpecified;
            }
            set
            {
                this.positionFieldSpecified = value;
            }
        }

        public booleanEnum postLabelCache
        {
            get
            {
                return this.postLabelCacheField;
            }
            set
            {
                this.postLabelCacheField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool postLabelCacheSpecified
        {
            get
            {
                return this.postLabelCacheFieldSpecified;
            }
            set
            {
                this.postLabelCacheFieldSpecified = value;
            }
        }

        public string template
        {
            get
            {
                return this.templateField;
            }
            set
            {
                this.templateField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Legend));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Legend object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Legend object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Legend object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Legend obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Legend);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Legend obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Legend Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Legend)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Legend object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Legend object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Legend object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Legend obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Legend);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Legend obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Legend LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class OutputFormat
    {

        private string driverField;

        private string extensionField;

        private ObservableCollection<string> formatOptionField;

        private OutputFormatImageMode imageModeField;

        private string mimeTypeField;

        private stateEnum transparentField;

        private bool transparentFieldSpecified;

        private string nameField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public OutputFormat()
        {
            this.formatOptionField = new ObservableCollection<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string driver
        {
            get
            {
                return this.driverField;
            }
            set
            {
                this.driverField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string extension
        {
            get
            {
                return this.extensionField;
            }
            set
            {
                this.extensionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("formatOption", Order = 2)]
        public ObservableCollection<string> formatOption
        {
            get
            {
                return this.formatOptionField;
            }
            set
            {
                this.formatOptionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public OutputFormatImageMode imageMode
        {
            get
            {
                return this.imageModeField;
            }
            set
            {
                this.imageModeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string mimeType
        {
            get
            {
                return this.mimeTypeField;
            }
            set
            {
                this.mimeTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public stateEnum transparent
        {
            get
            {
                return this.transparentField;
            }
            set
            {
                this.transparentField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transparentSpecified
        {
            get
            {
                return this.transparentFieldSpecified;
            }
            set
            {
                this.transparentFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OutputFormat));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OutputFormat object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an OutputFormat object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output OutputFormat object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OutputFormat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OutputFormat);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out OutputFormat obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static OutputFormat Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((OutputFormat)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current OutputFormat object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OutputFormat object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output OutputFormat object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OutputFormat obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OutputFormat);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OutputFormat obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OutputFormat LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum OutputFormatImageMode
    {

        /// <remarks/>
        PC256,

        /// <remarks/>
        RGB,

        /// <remarks/>
        RGBA,

        /// <remarks/>
        BYTE,

        /// <remarks/>
        INT16,

        /// <remarks/>
        FLOAT32,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class Web
    {

        private string browseFormatField;

        private string emptyField;

        private string errorField;

        private string footerField;

        private string headerField;

        private string imagePathField;

        private string tempPathField;

        private string imageUrlField;

        private string legendFormatField;

        private string logField;

        private double maxScaleDenomField;

        private bool maxScaleDenomFieldSpecified;

        private string maxTemplateField;

        private ObservableCollection<itemTypeItem> metadataField;

        private double minScaleDenomField;

        private bool minScaleDenomFieldSpecified;

        private string minTemplateField;

        private string queryFormatField;

        private string templateField;

        private ObservableCollection<itemTypeItem> validationField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Web()
        {
            this.validationField = new ObservableCollection<itemTypeItem>();
            this.metadataField = new ObservableCollection<itemTypeItem>();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string browseFormat
        {
            get
            {
                return this.browseFormatField;
            }
            set
            {
                this.browseFormatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string empty
        {
            get
            {
                return this.emptyField;
            }
            set
            {
                this.emptyField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string error
        {
            get
            {
                return this.errorField;
            }
            set
            {
                this.errorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public string footer
        {
            get
            {
                return this.footerField;
            }
            set
            {
                this.footerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string header
        {
            get
            {
                return this.headerField;
            }
            set
            {
                this.headerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string imagePath
        {
            get
            {
                return this.imagePathField;
            }
            set
            {
                this.imagePathField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string tempPath
        {
            get
            {
                return this.tempPathField;
            }
            set
            {
                this.tempPathField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public string imageUrl
        {
            get
            {
                return this.imageUrlField;
            }
            set
            {
                this.imageUrlField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string legendFormat
        {
            get
            {
                return this.legendFormatField;
            }
            set
            {
                this.legendFormatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
        public string log
        {
            get
            {
                return this.logField;
            }
            set
            {
                this.logField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 10)]
        public double maxScaleDenom
        {
            get
            {
                return this.maxScaleDenomField;
            }
            set
            {
                this.maxScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxScaleDenomSpecified
        {
            get
            {
                return this.maxScaleDenomFieldSpecified;
            }
            set
            {
                this.maxScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public string maxTemplate
        {
            get
            {
                return this.maxTemplateField;
            }
            set
            {
                this.maxTemplateField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 12)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable = false)]
        public ObservableCollection<itemTypeItem> Metadata
        {
            get
            {
                return this.metadataField;
            }
            set
            {
                this.metadataField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 13)]
        public double minScaleDenom
        {
            get
            {
                return this.minScaleDenomField;
            }
            set
            {
                this.minScaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minScaleDenomSpecified
        {
            get
            {
                return this.minScaleDenomFieldSpecified;
            }
            set
            {
                this.minScaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public string minTemplate
        {
            get
            {
                return this.minTemplateField;
            }
            set
            {
                this.minTemplateField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public string queryFormat
        {
            get
            {
                return this.queryFormatField;
            }
            set
            {
                this.queryFormatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public string template
        {
            get
            {
                return this.templateField;
            }
            set
            {
                this.templateField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 17)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable = false)]
        public ObservableCollection<itemTypeItem> Validation
        {
            get
            {
                return this.validationField;
            }
            set
            {
                this.validationField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Web));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Web object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Web object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Web object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Web obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Web);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Web obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Web Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Web)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Web object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Web object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Web object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Web obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Web);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Web obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Web LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public partial class itemTypeItem
    {

        private string nameField;

        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(itemTypeItem));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current itemTypeItem object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an itemTypeItem object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output itemTypeItem object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out itemTypeItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(itemTypeItem);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out itemTypeItem obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static itemTypeItem Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((itemTypeItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current itemTypeItem object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an itemTypeItem object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output itemTypeItem object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out itemTypeItem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(itemTypeItem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out itemTypeItem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static itemTypeItem LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class QueryMap
    {

        private rgbColorType colorField;

        private sizeType sizeField;

        private QueryMapStyle styleField;

        private bool styleFieldSpecified;

        private stateEnum statusField;

        private bool statusFieldSpecified;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public QueryMap()
        {
            this.sizeField = new sizeType();
            this.colorField = new rgbColorType();
        }

        public rgbColorType color
        {
            get
            {
                return this.colorField;
            }
            set
            {
                this.colorField = value;
            }
        }

        public sizeType size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        public QueryMapStyle style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                this.styleField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool styleSpecified
        {
            get
            {
                return this.styleFieldSpecified;
            }
            set
            {
                this.styleFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public stateEnum status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified
        {
            get
            {
                return this.statusFieldSpecified;
            }
            set
            {
                this.statusFieldSpecified = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(QueryMap));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current QueryMap object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an QueryMap object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output QueryMap object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out QueryMap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(QueryMap);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out QueryMap obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static QueryMap Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((QueryMap)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current QueryMap object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an QueryMap object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output QueryMap object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out QueryMap obj, out System.Exception exception)
        {
            exception = null;
            obj = default(QueryMap);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out QueryMap obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static QueryMap LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum QueryMapStyle
    {

        /// <remarks/>
        NORMAL,

        /// <remarks/>
        HILITE,

        /// <remarks/>
        SELECTED,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum LayerConnectionType
    {

        /// <remarks/>
        LOCAL,

        /// <remarks/>
        SDE,

        /// <remarks/>
        OGR,

        /// <remarks/>
        WFS,

        /// <remarks/>
        POSTGIS,

        /// <remarks/>
        ORACLESPATIAL,

        /// <remarks/>
        WMS,

        /// <remarks/>
        PLUGIN,

        /// <remarks/>
        UNION,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    public enum LayerType
    {

        /// <remarks/>
        POINT,

        /// <remarks/>
        LINE,

        /// <remarks/>
        POLYGON,

        /// <remarks/>
        CIRCLE,

        /// <remarks/>
        ANNOTATION,

        /// <remarks/>
        RASTER,

        /// <remarks/>
        QUERY,

        /// <remarks/>
        CHART,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = false)]
    public partial class SymbolSet
    {

        private ObservableCollection<Symbol> symbolField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public SymbolSet()
        {
            this.symbolField = new ObservableCollection<Symbol>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Symbol", Order = 0)]
        public ObservableCollection<Symbol> Symbol
        {
            get
            {
                return this.symbolField;
            }
            set
            {
                this.symbolField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SymbolSet));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SymbolSet object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SymbolSet object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output SymbolSet object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SymbolSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SymbolSet);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out SymbolSet obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static SymbolSet Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((SymbolSet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current SymbolSet object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SymbolSet object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output SymbolSet object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SymbolSet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SymbolSet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SymbolSet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SymbolSet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = false)]
    public partial class Map
    {

        private double angleField;

        private ObservableCollection<itemTypeItem> configField;

        private string dataPatternField;

        private string debugField;

        private string defResolutionField;

        private string extentField;

        private string fontSetField;

        private rgbColorType imageColorField;

        private string imageTypeField;

        private ObservableCollection<string> includeField;

        private ObservableCollection<Layer> layerField;

        private Legend legendField;

        private string maxSizeField;

        private ObservableCollection<OutputFormat> outputFormatField;

        private string projectionField;

        private QueryMap queryMapField;

        private Reference referenceField;

        private string resolutionField;

        private double scaleDenomField;

        private bool scaleDenomFieldSpecified;

        private ScaleBar scaleBarField;

        private string shapePathField;

        private sizeType sizeField;

        private string symbolSetField;

        private ObservableCollection<Symbol> symbolField;

        private string templatePatternField;

        private string unitsField;

        private ObservableCollection<Web> webField;

        private string nameField;

        private stateEnum statusField;

        private string versionField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public Map()
        {
            this.webField = new ObservableCollection<Web>();
            this.symbolField = new ObservableCollection<Symbol>();
            this.sizeField = new sizeType();
            this.scaleBarField = new ScaleBar();
            this.referenceField = new Reference();
            this.queryMapField = new QueryMap();
            this.outputFormatField = new ObservableCollection<OutputFormat>();
            this.legendField = new Legend();
            this.layerField = new ObservableCollection<Layer>();
            this.includeField = new ObservableCollection<string>();
            this.imageColorField = new rgbColorType();
            this.configField = new ObservableCollection<itemTypeItem>();
            this.angleField = 0D;
            this.debugField = "OFF";
            this.defResolutionField = "72";
            this.resolutionField = "72";
            this.unitsField = "METERS";
            this.statusField = stateEnum.ON;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        [System.ComponentModel.DefaultValueAttribute(0D)]
        public double angle
        {
            get
            {
                return this.angleField;
            }
            set
            {
                this.angleField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable = false)]
        public ObservableCollection<itemTypeItem> Config
        {
            get
            {
                return this.configField;
            }
            set
            {
                this.configField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string dataPattern
        {
            get
            {
                return this.dataPatternField;
            }
            set
            {
                this.dataPatternField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        [System.ComponentModel.DefaultValueAttribute("OFF")]
        public string debug
        {
            get
            {
                return this.debugField;
            }
            set
            {
                this.debugField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 4)]
        [System.ComponentModel.DefaultValueAttribute("72")]
        public string defResolution
        {
            get
            {
                return this.defResolutionField;
            }
            set
            {
                this.defResolutionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public string extent
        {
            get
            {
                return this.extentField;
            }
            set
            {
                this.extentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public string fontSet
        {
            get
            {
                return this.fontSetField;
            }
            set
            {
                this.fontSetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
        public rgbColorType imageColor
        {
            get
            {
                return this.imageColorField;
            }
            set
            {
                this.imageColorField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
        public string imageType
        {
            get
            {
                return this.imageTypeField;
            }
            set
            {
                this.imageTypeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("include", Order = 9)]
        public ObservableCollection<string> include
        {
            get
            {
                return this.includeField;
            }
            set
            {
                this.includeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Layer", Order = 10)]
        public ObservableCollection<Layer> Layer
        {
            get
            {
                return this.layerField;
            }
            set
            {
                this.layerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 11)]
        public Legend Legend
        {
            get
            {
                return this.legendField;
            }
            set
            {
                this.legendField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 12)]
        public string maxSize
        {
            get
            {
                return this.maxSizeField;
            }
            set
            {
                this.maxSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("OutputFormat", Order = 13)]
        public ObservableCollection<OutputFormat> OutputFormat
        {
            get
            {
                return this.outputFormatField;
            }
            set
            {
                this.outputFormatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 14)]
        public string projection
        {
            get
            {
                return this.projectionField;
            }
            set
            {
                this.projectionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 15)]
        public QueryMap QueryMap
        {
            get
            {
                return this.queryMapField;
            }
            set
            {
                this.queryMapField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 16)]
        public Reference Reference
        {
            get
            {
                return this.referenceField;
            }
            set
            {
                this.referenceField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "positiveInteger", Order = 17)]
        [System.ComponentModel.DefaultValueAttribute("72")]
        public string resolution
        {
            get
            {
                return this.resolutionField;
            }
            set
            {
                this.resolutionField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 18)]
        public double scaleDenom
        {
            get
            {
                return this.scaleDenomField;
            }
            set
            {
                this.scaleDenomField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool scaleDenomSpecified
        {
            get
            {
                return this.scaleDenomFieldSpecified;
            }
            set
            {
                this.scaleDenomFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 19)]
        public ScaleBar ScaleBar
        {
            get
            {
                return this.scaleBarField;
            }
            set
            {
                this.scaleBarField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 20)]
        public string shapePath
        {
            get
            {
                return this.shapePathField;
            }
            set
            {
                this.shapePathField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 21)]
        public sizeType size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 22)]
        public string symbolSet
        {
            get
            {
                return this.symbolSetField;
            }
            set
            {
                this.symbolSetField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Symbol", Order = 23)]
        public ObservableCollection<Symbol> Symbol
        {
            get
            {
                return this.symbolField;
            }
            set
            {
                this.symbolField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 24)]
        public string templatePattern
        {
            get
            {
                return this.templatePatternField;
            }
            set
            {
                this.templatePatternField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 25)]
        [System.ComponentModel.DefaultValueAttribute("METERS")]
        public string units
        {
            get
            {
                return this.unitsField;
            }
            set
            {
                this.unitsField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Web", Order = 26)]
        public ObservableCollection<Web> Web
        {
            get
            {
                return this.webField;
            }
            set
            {
                this.webField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(stateEnum.ON)]
        public stateEnum status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Map));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Map object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an Map object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output Map object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Map obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Map);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Map obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Map Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Map)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Map object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Map object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output Map object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Map obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Map);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Map obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Map LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.mapserver.org/mapserver")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.mapserver.org/mapserver", IsNullable = true)]
    public partial class itemType
    {

        private ObservableCollection<itemTypeItem> itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public itemType()
        {
            this.itemField = new ObservableCollection<itemTypeItem>();
        }

        [System.Xml.Serialization.XmlElementAttribute("item", Order = 0)]
        public ObservableCollection<itemTypeItem> item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(itemType));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current itemType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an itemType object
        /// </summary>
        /// <param Name="xml">string workflow markup to deserialize</param>
        /// <param Name="obj">Output itemType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out itemType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(itemType);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out itemType obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static itemType Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((itemType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current itemType object into file
        /// </summary>
        /// <param Name="fileName">full path of outupt xml file</param>
        /// <param Name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an itemType object
        /// </summary>
        /// <param Name="fileName">string xml file to load and deserialize</param>
        /// <param Name="obj">Output itemType object</param>
        /// <param Name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out itemType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(itemType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out itemType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static itemType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
